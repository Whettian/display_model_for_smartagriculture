{
  "version": 3,
  "sources": ["../zrender/lib/canvas/Layer.js", "../zrender/lib/canvas/Painter.js", "../echarts/lib/renderer/installCanvasRenderer.js", "../echarts/lib/component/dataset/install.js"],
  "sourcesContent": ["import { __extends } from \"tslib\";\r\nimport * as util from '../core/util.js';\r\nimport { devicePixelRatio } from '../config.js';\r\nimport Eventful from '../core/Eventful.js';\r\nimport { getCanvasGradient } from './helper.js';\r\nimport { createCanvasPattern } from './graphic.js';\r\nimport BoundingRect from '../core/BoundingRect.js';\r\nimport { REDRAW_BIT } from '../graphic/constants.js';\r\nimport { platformApi } from '../core/platform.js';\r\nfunction createDom(id, painter, dpr) {\r\n    var newDom = platformApi.createCanvas();\r\n    var width = painter.getWidth();\r\n    var height = painter.getHeight();\r\n    var newDomStyle = newDom.style;\r\n    if (newDomStyle) {\r\n        newDomStyle.position = 'absolute';\r\n        newDomStyle.left = '0';\r\n        newDomStyle.top = '0';\r\n        newDomStyle.width = width + 'px';\r\n        newDomStyle.height = height + 'px';\r\n        newDom.setAttribute('data-zr-dom-id', id);\r\n    }\r\n    newDom.width = width * dpr;\r\n    newDom.height = height * dpr;\r\n    return newDom;\r\n}\r\n;\r\nvar Layer = (function (_super) {\r\n    __extends(Layer, _super);\r\n    function Layer(id, painter, dpr) {\r\n        var _this = _super.call(this) || this;\r\n        _this.motionBlur = false;\r\n        _this.lastFrameAlpha = 0.7;\r\n        _this.dpr = 1;\r\n        _this.virtual = false;\r\n        _this.config = {};\r\n        _this.incremental = false;\r\n        _this.zlevel = 0;\r\n        _this.maxRepaintRectCount = 5;\r\n        _this.__dirty = true;\r\n        _this.__firstTimePaint = true;\r\n        _this.__used = false;\r\n        _this.__drawIndex = 0;\r\n        _this.__startIndex = 0;\r\n        _this.__endIndex = 0;\r\n        _this.__prevStartIndex = null;\r\n        _this.__prevEndIndex = null;\r\n        var dom;\r\n        dpr = dpr || devicePixelRatio;\r\n        if (typeof id === 'string') {\r\n            dom = createDom(id, painter, dpr);\r\n        }\r\n        else if (util.isObject(id)) {\r\n            dom = id;\r\n            id = dom.id;\r\n        }\r\n        _this.id = id;\r\n        _this.dom = dom;\r\n        var domStyle = dom.style;\r\n        if (domStyle) {\r\n            util.disableUserSelect(dom);\r\n            dom.onselectstart = function () { return false; };\r\n            domStyle.padding = '0';\r\n            domStyle.margin = '0';\r\n            domStyle.borderWidth = '0';\r\n        }\r\n        _this.painter = painter;\r\n        _this.dpr = dpr;\r\n        return _this;\r\n    }\r\n    Layer.prototype.getElementCount = function () {\r\n        return this.__endIndex - this.__startIndex;\r\n    };\r\n    Layer.prototype.afterBrush = function () {\r\n        this.__prevStartIndex = this.__startIndex;\r\n        this.__prevEndIndex = this.__endIndex;\r\n    };\r\n    Layer.prototype.initContext = function () {\r\n        this.ctx = this.dom.getContext('2d');\r\n        this.ctx.dpr = this.dpr;\r\n    };\r\n    Layer.prototype.setUnpainted = function () {\r\n        this.__firstTimePaint = true;\r\n    };\r\n    Layer.prototype.createBackBuffer = function () {\r\n        var dpr = this.dpr;\r\n        this.domBack = createDom('back-' + this.id, this.painter, dpr);\r\n        this.ctxBack = this.domBack.getContext('2d');\r\n        if (dpr !== 1) {\r\n            this.ctxBack.scale(dpr, dpr);\r\n        }\r\n    };\r\n    Layer.prototype.createRepaintRects = function (displayList, prevList, viewWidth, viewHeight) {\r\n        if (this.__firstTimePaint) {\r\n            this.__firstTimePaint = false;\r\n            return null;\r\n        }\r\n        var mergedRepaintRects = [];\r\n        var maxRepaintRectCount = this.maxRepaintRectCount;\r\n        var full = false;\r\n        var pendingRect = new BoundingRect(0, 0, 0, 0);\r\n        function addRectToMergePool(rect) {\r\n            if (!rect.isFinite() || rect.isZero()) {\r\n                return;\r\n            }\r\n            if (mergedRepaintRects.length === 0) {\r\n                var boundingRect = new BoundingRect(0, 0, 0, 0);\r\n                boundingRect.copy(rect);\r\n                mergedRepaintRects.push(boundingRect);\r\n            }\r\n            else {\r\n                var isMerged = false;\r\n                var minDeltaArea = Infinity;\r\n                var bestRectToMergeIdx = 0;\r\n                for (var i = 0; i < mergedRepaintRects.length; ++i) {\r\n                    var mergedRect = mergedRepaintRects[i];\r\n                    if (mergedRect.intersect(rect)) {\r\n                        var pendingRect_1 = new BoundingRect(0, 0, 0, 0);\r\n                        pendingRect_1.copy(mergedRect);\r\n                        pendingRect_1.union(rect);\r\n                        mergedRepaintRects[i] = pendingRect_1;\r\n                        isMerged = true;\r\n                        break;\r\n                    }\r\n                    else if (full) {\r\n                        pendingRect.copy(rect);\r\n                        pendingRect.union(mergedRect);\r\n                        var aArea = rect.width * rect.height;\r\n                        var bArea = mergedRect.width * mergedRect.height;\r\n                        var pendingArea = pendingRect.width * pendingRect.height;\r\n                        var deltaArea = pendingArea - aArea - bArea;\r\n                        if (deltaArea < minDeltaArea) {\r\n                            minDeltaArea = deltaArea;\r\n                            bestRectToMergeIdx = i;\r\n                        }\r\n                    }\r\n                }\r\n                if (full) {\r\n                    mergedRepaintRects[bestRectToMergeIdx].union(rect);\r\n                    isMerged = true;\r\n                }\r\n                if (!isMerged) {\r\n                    var boundingRect = new BoundingRect(0, 0, 0, 0);\r\n                    boundingRect.copy(rect);\r\n                    mergedRepaintRects.push(boundingRect);\r\n                }\r\n                if (!full) {\r\n                    full = mergedRepaintRects.length >= maxRepaintRectCount;\r\n                }\r\n            }\r\n        }\r\n        for (var i = this.__startIndex; i < this.__endIndex; ++i) {\r\n            var el = displayList[i];\r\n            if (el) {\r\n                var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\r\n                var prevRect = el.__isRendered && ((el.__dirty & REDRAW_BIT) || !shouldPaint)\r\n                    ? el.getPrevPaintRect()\r\n                    : null;\r\n                if (prevRect) {\r\n                    addRectToMergePool(prevRect);\r\n                }\r\n                var curRect = shouldPaint && ((el.__dirty & REDRAW_BIT) || !el.__isRendered)\r\n                    ? el.getPaintRect()\r\n                    : null;\r\n                if (curRect) {\r\n                    addRectToMergePool(curRect);\r\n                }\r\n            }\r\n        }\r\n        for (var i = this.__prevStartIndex; i < this.__prevEndIndex; ++i) {\r\n            var el = prevList[i];\r\n            var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\r\n            if (el && (!shouldPaint || !el.__zr) && el.__isRendered) {\r\n                var prevRect = el.getPrevPaintRect();\r\n                if (prevRect) {\r\n                    addRectToMergePool(prevRect);\r\n                }\r\n            }\r\n        }\r\n        var hasIntersections;\r\n        do {\r\n            hasIntersections = false;\r\n            for (var i = 0; i < mergedRepaintRects.length;) {\r\n                if (mergedRepaintRects[i].isZero()) {\r\n                    mergedRepaintRects.splice(i, 1);\r\n                    continue;\r\n                }\r\n                for (var j = i + 1; j < mergedRepaintRects.length;) {\r\n                    if (mergedRepaintRects[i].intersect(mergedRepaintRects[j])) {\r\n                        hasIntersections = true;\r\n                        mergedRepaintRects[i].union(mergedRepaintRects[j]);\r\n                        mergedRepaintRects.splice(j, 1);\r\n                    }\r\n                    else {\r\n                        j++;\r\n                    }\r\n                }\r\n                i++;\r\n            }\r\n        } while (hasIntersections);\r\n        this._paintRects = mergedRepaintRects;\r\n        return mergedRepaintRects;\r\n    };\r\n    Layer.prototype.debugGetPaintRects = function () {\r\n        return (this._paintRects || []).slice();\r\n    };\r\n    Layer.prototype.resize = function (width, height) {\r\n        var dpr = this.dpr;\r\n        var dom = this.dom;\r\n        var domStyle = dom.style;\r\n        var domBack = this.domBack;\r\n        if (domStyle) {\r\n            domStyle.width = width + 'px';\r\n            domStyle.height = height + 'px';\r\n        }\r\n        dom.width = width * dpr;\r\n        dom.height = height * dpr;\r\n        if (domBack) {\r\n            domBack.width = width * dpr;\r\n            domBack.height = height * dpr;\r\n            if (dpr !== 1) {\r\n                this.ctxBack.scale(dpr, dpr);\r\n            }\r\n        }\r\n    };\r\n    Layer.prototype.clear = function (clearAll, clearColor, repaintRects) {\r\n        var dom = this.dom;\r\n        var ctx = this.ctx;\r\n        var width = dom.width;\r\n        var height = dom.height;\r\n        clearColor = clearColor || this.clearColor;\r\n        var haveMotionBLur = this.motionBlur && !clearAll;\r\n        var lastFrameAlpha = this.lastFrameAlpha;\r\n        var dpr = this.dpr;\r\n        var self = this;\r\n        if (haveMotionBLur) {\r\n            if (!this.domBack) {\r\n                this.createBackBuffer();\r\n            }\r\n            this.ctxBack.globalCompositeOperation = 'copy';\r\n            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);\r\n        }\r\n        var domBack = this.domBack;\r\n        function doClear(x, y, width, height) {\r\n            ctx.clearRect(x, y, width, height);\r\n            if (clearColor && clearColor !== 'transparent') {\r\n                var clearColorGradientOrPattern = void 0;\r\n                if (util.isGradientObject(clearColor)) {\r\n                    clearColorGradientOrPattern = clearColor.__canvasGradient\r\n                        || getCanvasGradient(ctx, clearColor, {\r\n                            x: 0,\r\n                            y: 0,\r\n                            width: width,\r\n                            height: height\r\n                        });\r\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\r\n                }\r\n                else if (util.isImagePatternObject(clearColor)) {\r\n                    clearColorGradientOrPattern = createCanvasPattern(ctx, clearColor, {\r\n                        dirty: function () {\r\n                            self.setUnpainted();\r\n                            self.__painter.refresh();\r\n                        }\r\n                    });\r\n                }\r\n                ctx.save();\r\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\r\n                ctx.fillRect(x, y, width, height);\r\n                ctx.restore();\r\n            }\r\n            if (haveMotionBLur) {\r\n                ctx.save();\r\n                ctx.globalAlpha = lastFrameAlpha;\r\n                ctx.drawImage(domBack, x, y, width, height);\r\n                ctx.restore();\r\n            }\r\n        }\r\n        ;\r\n        if (!repaintRects || haveMotionBLur) {\r\n            doClear(0, 0, width, height);\r\n        }\r\n        else if (repaintRects.length) {\r\n            util.each(repaintRects, function (rect) {\r\n                doClear(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\r\n            });\r\n        }\r\n    };\r\n    return Layer;\r\n}(Eventful));\r\nexport default Layer;\r\n", "import { devicePixelRatio } from '../config.js';\r\nimport * as util from '../core/util.js';\r\nimport Layer from './Layer.js';\r\nimport requestAnimationFrame from '../animation/requestAnimationFrame.js';\r\nimport env from '../core/env.js';\r\nimport { brush, brushSingle } from './graphic.js';\r\nimport { REDRAW_BIT } from '../graphic/constants.js';\r\nimport { getSize } from './helper.js';\r\nvar HOVER_LAYER_ZLEVEL = 1e5;\r\nvar CANVAS_ZLEVEL = 314159;\r\nvar EL_AFTER_INCREMENTAL_INC = 0.01;\r\nvar INCREMENTAL_INC = 0.001;\r\nfunction isLayerValid(layer) {\r\n    if (!layer) {\r\n        return false;\r\n    }\r\n    if (layer.__builtin__) {\r\n        return true;\r\n    }\r\n    if (typeof (layer.resize) !== 'function'\r\n        || typeof (layer.refresh) !== 'function') {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction createRoot(width, height) {\r\n    var domRoot = document.createElement('div');\r\n    domRoot.style.cssText = [\r\n        'position:relative',\r\n        'width:' + width + 'px',\r\n        'height:' + height + 'px',\r\n        'padding:0',\r\n        'margin:0',\r\n        'border-width:0'\r\n    ].join(';') + ';';\r\n    return domRoot;\r\n}\r\nvar CanvasPainter = (function () {\r\n    function CanvasPainter(root, storage, opts, id) {\r\n        this.type = 'canvas';\r\n        this._zlevelList = [];\r\n        this._prevDisplayList = [];\r\n        this._layers = {};\r\n        this._layerConfig = {};\r\n        this._needsManuallyCompositing = false;\r\n        this.type = 'canvas';\r\n        var singleCanvas = !root.nodeName\r\n            || root.nodeName.toUpperCase() === 'CANVAS';\r\n        this._opts = opts = util.extend({}, opts || {});\r\n        this.dpr = opts.devicePixelRatio || devicePixelRatio;\r\n        this._singleCanvas = singleCanvas;\r\n        this.root = root;\r\n        var rootStyle = root.style;\r\n        if (rootStyle) {\r\n            util.disableUserSelect(root);\r\n            root.innerHTML = '';\r\n        }\r\n        this.storage = storage;\r\n        var zlevelList = this._zlevelList;\r\n        this._prevDisplayList = [];\r\n        var layers = this._layers;\r\n        if (!singleCanvas) {\r\n            this._width = getSize(root, 0, opts);\r\n            this._height = getSize(root, 1, opts);\r\n            var domRoot = this._domRoot = createRoot(this._width, this._height);\r\n            root.appendChild(domRoot);\r\n        }\r\n        else {\r\n            var rootCanvas = root;\r\n            var width = rootCanvas.width;\r\n            var height = rootCanvas.height;\r\n            if (opts.width != null) {\r\n                width = opts.width;\r\n            }\r\n            if (opts.height != null) {\r\n                height = opts.height;\r\n            }\r\n            this.dpr = opts.devicePixelRatio || 1;\r\n            rootCanvas.width = width * this.dpr;\r\n            rootCanvas.height = height * this.dpr;\r\n            this._width = width;\r\n            this._height = height;\r\n            var mainLayer = new Layer(rootCanvas, this, this.dpr);\r\n            mainLayer.__builtin__ = true;\r\n            mainLayer.initContext();\r\n            layers[CANVAS_ZLEVEL] = mainLayer;\r\n            mainLayer.zlevel = CANVAS_ZLEVEL;\r\n            zlevelList.push(CANVAS_ZLEVEL);\r\n            this._domRoot = root;\r\n        }\r\n    }\r\n    CanvasPainter.prototype.getType = function () {\r\n        return 'canvas';\r\n    };\r\n    CanvasPainter.prototype.isSingleCanvas = function () {\r\n        return this._singleCanvas;\r\n    };\r\n    CanvasPainter.prototype.getViewportRoot = function () {\r\n        return this._domRoot;\r\n    };\r\n    CanvasPainter.prototype.getViewportRootOffset = function () {\r\n        var viewportRoot = this.getViewportRoot();\r\n        if (viewportRoot) {\r\n            return {\r\n                offsetLeft: viewportRoot.offsetLeft || 0,\r\n                offsetTop: viewportRoot.offsetTop || 0\r\n            };\r\n        }\r\n    };\r\n    CanvasPainter.prototype.refresh = function (paintAll) {\r\n        var list = this.storage.getDisplayList(true);\r\n        var prevList = this._prevDisplayList;\r\n        var zlevelList = this._zlevelList;\r\n        this._redrawId = Math.random();\r\n        this._paintList(list, prevList, paintAll, this._redrawId);\r\n        for (var i = 0; i < zlevelList.length; i++) {\r\n            var z = zlevelList[i];\r\n            var layer = this._layers[z];\r\n            if (!layer.__builtin__ && layer.refresh) {\r\n                var clearColor = i === 0 ? this._backgroundColor : null;\r\n                layer.refresh(clearColor);\r\n            }\r\n        }\r\n        if (this._opts.useDirtyRect) {\r\n            this._prevDisplayList = list.slice();\r\n        }\r\n        return this;\r\n    };\r\n    CanvasPainter.prototype.refreshHover = function () {\r\n        this._paintHoverList(this.storage.getDisplayList(false));\r\n    };\r\n    CanvasPainter.prototype._paintHoverList = function (list) {\r\n        var len = list.length;\r\n        var hoverLayer = this._hoverlayer;\r\n        hoverLayer && hoverLayer.clear();\r\n        if (!len) {\r\n            return;\r\n        }\r\n        var scope = {\r\n            inHover: true,\r\n            viewWidth: this._width,\r\n            viewHeight: this._height\r\n        };\r\n        var ctx;\r\n        for (var i = 0; i < len; i++) {\r\n            var el = list[i];\r\n            if (el.__inHover) {\r\n                if (!hoverLayer) {\r\n                    hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);\r\n                }\r\n                if (!ctx) {\r\n                    ctx = hoverLayer.ctx;\r\n                    ctx.save();\r\n                }\r\n                brush(ctx, el, scope, i === len - 1);\r\n            }\r\n        }\r\n        if (ctx) {\r\n            ctx.restore();\r\n        }\r\n    };\r\n    CanvasPainter.prototype.getHoverLayer = function () {\r\n        return this.getLayer(HOVER_LAYER_ZLEVEL);\r\n    };\r\n    CanvasPainter.prototype.paintOne = function (ctx, el) {\r\n        brushSingle(ctx, el);\r\n    };\r\n    CanvasPainter.prototype._paintList = function (list, prevList, paintAll, redrawId) {\r\n        if (this._redrawId !== redrawId) {\r\n            return;\r\n        }\r\n        paintAll = paintAll || false;\r\n        this._updateLayerStatus(list);\r\n        var _a = this._doPaintList(list, prevList, paintAll), finished = _a.finished, needsRefreshHover = _a.needsRefreshHover;\r\n        if (this._needsManuallyCompositing) {\r\n            this._compositeManually();\r\n        }\r\n        if (needsRefreshHover) {\r\n            this._paintHoverList(list);\r\n        }\r\n        if (!finished) {\r\n            var self_1 = this;\r\n            requestAnimationFrame(function () {\r\n                self_1._paintList(list, prevList, paintAll, redrawId);\r\n            });\r\n        }\r\n        else {\r\n            this.eachLayer(function (layer) {\r\n                layer.afterBrush && layer.afterBrush();\r\n            });\r\n        }\r\n    };\r\n    CanvasPainter.prototype._compositeManually = function () {\r\n        var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;\r\n        var width = this._domRoot.width;\r\n        var height = this._domRoot.height;\r\n        ctx.clearRect(0, 0, width, height);\r\n        this.eachBuiltinLayer(function (layer) {\r\n            if (layer.virtual) {\r\n                ctx.drawImage(layer.dom, 0, 0, width, height);\r\n            }\r\n        });\r\n    };\r\n    CanvasPainter.prototype._doPaintList = function (list, prevList, paintAll) {\r\n        var _this = this;\r\n        var layerList = [];\r\n        var useDirtyRect = this._opts.useDirtyRect;\r\n        for (var zi = 0; zi < this._zlevelList.length; zi++) {\r\n            var zlevel = this._zlevelList[zi];\r\n            var layer = this._layers[zlevel];\r\n            if (layer.__builtin__\r\n                && layer !== this._hoverlayer\r\n                && (layer.__dirty || paintAll)) {\r\n                layerList.push(layer);\r\n            }\r\n        }\r\n        var finished = true;\r\n        var needsRefreshHover = false;\r\n        var _loop_1 = function (k) {\r\n            var layer = layerList[k];\r\n            var ctx = layer.ctx;\r\n            var repaintRects = useDirtyRect\r\n                && layer.createRepaintRects(list, prevList, this_1._width, this_1._height);\r\n            var start = paintAll ? layer.__startIndex : layer.__drawIndex;\r\n            var useTimer = !paintAll && layer.incremental && Date.now;\r\n            var startTime = useTimer && Date.now();\r\n            var clearColor = layer.zlevel === this_1._zlevelList[0]\r\n                ? this_1._backgroundColor : null;\r\n            if (layer.__startIndex === layer.__endIndex) {\r\n                layer.clear(false, clearColor, repaintRects);\r\n            }\r\n            else if (start === layer.__startIndex) {\r\n                var firstEl = list[start];\r\n                if (!firstEl.incremental || !firstEl.notClear || paintAll) {\r\n                    layer.clear(false, clearColor, repaintRects);\r\n                }\r\n            }\r\n            if (start === -1) {\r\n                console.error('For some unknown reason. drawIndex is -1');\r\n                start = layer.__startIndex;\r\n            }\r\n            var i;\r\n            var repaint = function (repaintRect) {\r\n                var scope = {\r\n                    inHover: false,\r\n                    allClipped: false,\r\n                    prevEl: null,\r\n                    viewWidth: _this._width,\r\n                    viewHeight: _this._height\r\n                };\r\n                for (i = start; i < layer.__endIndex; i++) {\r\n                    var el = list[i];\r\n                    if (el.__inHover) {\r\n                        needsRefreshHover = true;\r\n                    }\r\n                    _this._doPaintEl(el, layer, useDirtyRect, repaintRect, scope, i === layer.__endIndex - 1);\r\n                    if (useTimer) {\r\n                        var dTime = Date.now() - startTime;\r\n                        if (dTime > 15) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (scope.prevElClipPaths) {\r\n                    ctx.restore();\r\n                }\r\n            };\r\n            if (repaintRects) {\r\n                if (repaintRects.length === 0) {\r\n                    i = layer.__endIndex;\r\n                }\r\n                else {\r\n                    var dpr = this_1.dpr;\r\n                    for (var r = 0; r < repaintRects.length; ++r) {\r\n                        var rect = repaintRects[r];\r\n                        ctx.save();\r\n                        ctx.beginPath();\r\n                        ctx.rect(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\r\n                        ctx.clip();\r\n                        repaint(rect);\r\n                        ctx.restore();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                ctx.save();\r\n                repaint();\r\n                ctx.restore();\r\n            }\r\n            layer.__drawIndex = i;\r\n            if (layer.__drawIndex < layer.__endIndex) {\r\n                finished = false;\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        for (var k = 0; k < layerList.length; k++) {\r\n            _loop_1(k);\r\n        }\r\n        if (env.wxa) {\r\n            util.each(this._layers, function (layer) {\r\n                if (layer && layer.ctx && layer.ctx.draw) {\r\n                    layer.ctx.draw();\r\n                }\r\n            });\r\n        }\r\n        return {\r\n            finished: finished,\r\n            needsRefreshHover: needsRefreshHover\r\n        };\r\n    };\r\n    CanvasPainter.prototype._doPaintEl = function (el, currentLayer, useDirtyRect, repaintRect, scope, isLast) {\r\n        var ctx = currentLayer.ctx;\r\n        if (useDirtyRect) {\r\n            var paintRect = el.getPaintRect();\r\n            if (!repaintRect || paintRect && paintRect.intersect(repaintRect)) {\r\n                brush(ctx, el, scope, isLast);\r\n                el.setPrevPaintRect(paintRect);\r\n            }\r\n        }\r\n        else {\r\n            brush(ctx, el, scope, isLast);\r\n        }\r\n    };\r\n    CanvasPainter.prototype.getLayer = function (zlevel, virtual) {\r\n        if (this._singleCanvas && !this._needsManuallyCompositing) {\r\n            zlevel = CANVAS_ZLEVEL;\r\n        }\r\n        var layer = this._layers[zlevel];\r\n        if (!layer) {\r\n            layer = new Layer('zr_' + zlevel, this, this.dpr);\r\n            layer.zlevel = zlevel;\r\n            layer.__builtin__ = true;\r\n            if (this._layerConfig[zlevel]) {\r\n                util.merge(layer, this._layerConfig[zlevel], true);\r\n            }\r\n            else if (this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC]) {\r\n                util.merge(layer, this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC], true);\r\n            }\r\n            if (virtual) {\r\n                layer.virtual = virtual;\r\n            }\r\n            this.insertLayer(zlevel, layer);\r\n            layer.initContext();\r\n        }\r\n        return layer;\r\n    };\r\n    CanvasPainter.prototype.insertLayer = function (zlevel, layer) {\r\n        var layersMap = this._layers;\r\n        var zlevelList = this._zlevelList;\r\n        var len = zlevelList.length;\r\n        var domRoot = this._domRoot;\r\n        var prevLayer = null;\r\n        var i = -1;\r\n        if (layersMap[zlevel]) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                util.logError('ZLevel ' + zlevel + ' has been used already');\r\n            }\r\n            return;\r\n        }\r\n        if (!isLayerValid(layer)) {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n                util.logError('Layer of zlevel ' + zlevel + ' is not valid');\r\n            }\r\n            return;\r\n        }\r\n        if (len > 0 && zlevel > zlevelList[0]) {\r\n            for (i = 0; i < len - 1; i++) {\r\n                if (zlevelList[i] < zlevel\r\n                    && zlevelList[i + 1] > zlevel) {\r\n                    break;\r\n                }\r\n            }\r\n            prevLayer = layersMap[zlevelList[i]];\r\n        }\r\n        zlevelList.splice(i + 1, 0, zlevel);\r\n        layersMap[zlevel] = layer;\r\n        if (!layer.virtual) {\r\n            if (prevLayer) {\r\n                var prevDom = prevLayer.dom;\r\n                if (prevDom.nextSibling) {\r\n                    domRoot.insertBefore(layer.dom, prevDom.nextSibling);\r\n                }\r\n                else {\r\n                    domRoot.appendChild(layer.dom);\r\n                }\r\n            }\r\n            else {\r\n                if (domRoot.firstChild) {\r\n                    domRoot.insertBefore(layer.dom, domRoot.firstChild);\r\n                }\r\n                else {\r\n                    domRoot.appendChild(layer.dom);\r\n                }\r\n            }\r\n        }\r\n        layer.__painter = this;\r\n    };\r\n    CanvasPainter.prototype.eachLayer = function (cb, context) {\r\n        var zlevelList = this._zlevelList;\r\n        for (var i = 0; i < zlevelList.length; i++) {\r\n            var z = zlevelList[i];\r\n            cb.call(context, this._layers[z], z);\r\n        }\r\n    };\r\n    CanvasPainter.prototype.eachBuiltinLayer = function (cb, context) {\r\n        var zlevelList = this._zlevelList;\r\n        for (var i = 0; i < zlevelList.length; i++) {\r\n            var z = zlevelList[i];\r\n            var layer = this._layers[z];\r\n            if (layer.__builtin__) {\r\n                cb.call(context, layer, z);\r\n            }\r\n        }\r\n    };\r\n    CanvasPainter.prototype.eachOtherLayer = function (cb, context) {\r\n        var zlevelList = this._zlevelList;\r\n        for (var i = 0; i < zlevelList.length; i++) {\r\n            var z = zlevelList[i];\r\n            var layer = this._layers[z];\r\n            if (!layer.__builtin__) {\r\n                cb.call(context, layer, z);\r\n            }\r\n        }\r\n    };\r\n    CanvasPainter.prototype.getLayers = function () {\r\n        return this._layers;\r\n    };\r\n    CanvasPainter.prototype._updateLayerStatus = function (list) {\r\n        this.eachBuiltinLayer(function (layer, z) {\r\n            layer.__dirty = layer.__used = false;\r\n        });\r\n        function updatePrevLayer(idx) {\r\n            if (prevLayer) {\r\n                if (prevLayer.__endIndex !== idx) {\r\n                    prevLayer.__dirty = true;\r\n                }\r\n                prevLayer.__endIndex = idx;\r\n            }\r\n        }\r\n        if (this._singleCanvas) {\r\n            for (var i_1 = 1; i_1 < list.length; i_1++) {\r\n                var el = list[i_1];\r\n                if (el.zlevel !== list[i_1 - 1].zlevel || el.incremental) {\r\n                    this._needsManuallyCompositing = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        var prevLayer = null;\r\n        var incrementalLayerCount = 0;\r\n        var prevZlevel;\r\n        var i;\r\n        for (i = 0; i < list.length; i++) {\r\n            var el = list[i];\r\n            var zlevel = el.zlevel;\r\n            var layer = void 0;\r\n            if (prevZlevel !== zlevel) {\r\n                prevZlevel = zlevel;\r\n                incrementalLayerCount = 0;\r\n            }\r\n            if (el.incremental) {\r\n                layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);\r\n                layer.incremental = true;\r\n                incrementalLayerCount = 1;\r\n            }\r\n            else {\r\n                layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);\r\n            }\r\n            if (!layer.__builtin__) {\r\n                util.logError('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);\r\n            }\r\n            if (layer !== prevLayer) {\r\n                layer.__used = true;\r\n                if (layer.__startIndex !== i) {\r\n                    layer.__dirty = true;\r\n                }\r\n                layer.__startIndex = i;\r\n                if (!layer.incremental) {\r\n                    layer.__drawIndex = i;\r\n                }\r\n                else {\r\n                    layer.__drawIndex = -1;\r\n                }\r\n                updatePrevLayer(i);\r\n                prevLayer = layer;\r\n            }\r\n            if ((el.__dirty & REDRAW_BIT) && !el.__inHover) {\r\n                layer.__dirty = true;\r\n                if (layer.incremental && layer.__drawIndex < 0) {\r\n                    layer.__drawIndex = i;\r\n                }\r\n            }\r\n        }\r\n        updatePrevLayer(i);\r\n        this.eachBuiltinLayer(function (layer, z) {\r\n            if (!layer.__used && layer.getElementCount() > 0) {\r\n                layer.__dirty = true;\r\n                layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;\r\n            }\r\n            if (layer.__dirty && layer.__drawIndex < 0) {\r\n                layer.__drawIndex = layer.__startIndex;\r\n            }\r\n        });\r\n    };\r\n    CanvasPainter.prototype.clear = function () {\r\n        this.eachBuiltinLayer(this._clearLayer);\r\n        return this;\r\n    };\r\n    CanvasPainter.prototype._clearLayer = function (layer) {\r\n        layer.clear();\r\n    };\r\n    CanvasPainter.prototype.setBackgroundColor = function (backgroundColor) {\r\n        this._backgroundColor = backgroundColor;\r\n        util.each(this._layers, function (layer) {\r\n            layer.setUnpainted();\r\n        });\r\n    };\r\n    CanvasPainter.prototype.configLayer = function (zlevel, config) {\r\n        if (config) {\r\n            var layerConfig = this._layerConfig;\r\n            if (!layerConfig[zlevel]) {\r\n                layerConfig[zlevel] = config;\r\n            }\r\n            else {\r\n                util.merge(layerConfig[zlevel], config, true);\r\n            }\r\n            for (var i = 0; i < this._zlevelList.length; i++) {\r\n                var _zlevel = this._zlevelList[i];\r\n                if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {\r\n                    var layer = this._layers[_zlevel];\r\n                    util.merge(layer, layerConfig[zlevel], true);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    CanvasPainter.prototype.delLayer = function (zlevel) {\r\n        var layers = this._layers;\r\n        var zlevelList = this._zlevelList;\r\n        var layer = layers[zlevel];\r\n        if (!layer) {\r\n            return;\r\n        }\r\n        layer.dom.parentNode.removeChild(layer.dom);\r\n        delete layers[zlevel];\r\n        zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\r\n    };\r\n    CanvasPainter.prototype.resize = function (width, height) {\r\n        if (!this._domRoot.style) {\r\n            if (width == null || height == null) {\r\n                return;\r\n            }\r\n            this._width = width;\r\n            this._height = height;\r\n            this.getLayer(CANVAS_ZLEVEL).resize(width, height);\r\n        }\r\n        else {\r\n            var domRoot = this._domRoot;\r\n            domRoot.style.display = 'none';\r\n            var opts = this._opts;\r\n            var root = this.root;\r\n            width != null && (opts.width = width);\r\n            height != null && (opts.height = height);\r\n            width = getSize(root, 0, opts);\r\n            height = getSize(root, 1, opts);\r\n            domRoot.style.display = '';\r\n            if (this._width !== width || height !== this._height) {\r\n                domRoot.style.width = width + 'px';\r\n                domRoot.style.height = height + 'px';\r\n                for (var id in this._layers) {\r\n                    if (this._layers.hasOwnProperty(id)) {\r\n                        this._layers[id].resize(width, height);\r\n                    }\r\n                }\r\n                this.refresh(true);\r\n            }\r\n            this._width = width;\r\n            this._height = height;\r\n        }\r\n        return this;\r\n    };\r\n    CanvasPainter.prototype.clearLayer = function (zlevel) {\r\n        var layer = this._layers[zlevel];\r\n        if (layer) {\r\n            layer.clear();\r\n        }\r\n    };\r\n    CanvasPainter.prototype.dispose = function () {\r\n        this.root.innerHTML = '';\r\n        this.root =\r\n            this.storage =\r\n                this._domRoot =\r\n                    this._layers = null;\r\n    };\r\n    CanvasPainter.prototype.getRenderedCanvas = function (opts) {\r\n        opts = opts || {};\r\n        if (this._singleCanvas && !this._compositeManually) {\r\n            return this._layers[CANVAS_ZLEVEL].dom;\r\n        }\r\n        var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\r\n        imageLayer.initContext();\r\n        imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);\r\n        var ctx = imageLayer.ctx;\r\n        if (opts.pixelRatio <= this.dpr) {\r\n            this.refresh();\r\n            var width_1 = imageLayer.dom.width;\r\n            var height_1 = imageLayer.dom.height;\r\n            this.eachLayer(function (layer) {\r\n                if (layer.__builtin__) {\r\n                    ctx.drawImage(layer.dom, 0, 0, width_1, height_1);\r\n                }\r\n                else if (layer.renderToCanvas) {\r\n                    ctx.save();\r\n                    layer.renderToCanvas(ctx);\r\n                    ctx.restore();\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            var scope = {\r\n                inHover: false,\r\n                viewWidth: this._width,\r\n                viewHeight: this._height\r\n            };\r\n            var displayList = this.storage.getDisplayList(true);\r\n            for (var i = 0, len = displayList.length; i < len; i++) {\r\n                var el = displayList[i];\r\n                brush(ctx, el, scope, i === len - 1);\r\n            }\r\n        }\r\n        return imageLayer.dom;\r\n    };\r\n    CanvasPainter.prototype.getWidth = function () {\r\n        return this._width;\r\n    };\r\n    CanvasPainter.prototype.getHeight = function () {\r\n        return this._height;\r\n    };\r\n    return CanvasPainter;\r\n}());\r\nexport default CanvasPainter;\r\n;\r\n", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport CanvasPainter from 'zrender/lib/canvas/Painter.js';\nexport function install(registers) {\n  registers.registerPainter('canvas', CanvasPainter);\n}", "\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { __extends } from \"tslib\";\n/**\r\n * This module is imported by echarts directly.\r\n *\r\n * Notice:\r\n * Always keep this file exists for backward compatibility.\r\n * Because before 4.1.0, dataset is an optional component,\r\n * some users may import this module manually.\r\n */\n\nimport ComponentModel from '../../model/Component.js';\nimport ComponentView from '../../view/Component.js';\nimport { SERIES_LAYOUT_BY_COLUMN } from '../../util/types.js';\nimport { disableTransformOptionMerge, SourceManager } from '../../data/helper/sourceManager.js';\n\nvar DatasetModel =\n/** @class */\nfunction (_super) {\n  __extends(DatasetModel, _super);\n\n  function DatasetModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'dataset';\n    return _this;\n  }\n\n  DatasetModel.prototype.init = function (option, parentModel, ecModel) {\n    _super.prototype.init.call(this, option, parentModel, ecModel);\n\n    this._sourceManager = new SourceManager(this);\n    disableTransformOptionMerge(this);\n  };\n\n  DatasetModel.prototype.mergeOption = function (newOption, ecModel) {\n    _super.prototype.mergeOption.call(this, newOption, ecModel);\n\n    disableTransformOptionMerge(this);\n  };\n\n  DatasetModel.prototype.optionUpdated = function () {\n    this._sourceManager.dirty();\n  };\n\n  DatasetModel.prototype.getSourceManager = function () {\n    return this._sourceManager;\n  };\n\n  DatasetModel.type = 'dataset';\n  DatasetModel.defaultOption = {\n    seriesLayoutBy: SERIES_LAYOUT_BY_COLUMN\n  };\n  return DatasetModel;\n}(ComponentModel);\n\nexport { DatasetModel };\n\nvar DatasetView =\n/** @class */\nfunction (_super) {\n  __extends(DatasetView, _super);\n\n  function DatasetView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'dataset';\n    return _this;\n  }\n\n  DatasetView.type = 'dataset';\n  return DatasetView;\n}(ComponentView);\n\nexport function install(registers) {\n  registers.registerComponentModel(DatasetModel);\n  registers.registerComponentView(DatasetView);\n}"],
  "mappings": "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",
  "names": []
}
